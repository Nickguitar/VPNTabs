#!/bin/bash
# Nicholas Ferreira - github.com/Nickguitar
# Gabriel Belli - github.com/gabrielbelli
# 26/02/22

port=9050
vpn_user=''
vpn_password=''

green="\033[0;32m"
red="\033[0;31m"
orange="\033[0;33m"
white="\033[1;37m"
reset="\033[0m"


### Function declaration zone
checkdocker(){
	if [ ! `which docker` ]; then
		echo -e "${red}[-] You must have docker installed. See: https://docs.docker.com/engine/install/${reset}"
		exit
	fi
}


banner(){
	echo -e "\033[0;33m"
	echo "ICAgICBfX18KICAgICAiLl9gLS4gICAgICAgICAoXC0uCiAgICAgICAgJy0uYDsuLS0uX19fLyBfYD4KICAgICAgICAgICBgIiggKSAgICAsICkgCiAgICAgICAgICAgICAgXFwtLS0tXC1c" | base64 -d
	echo -e "\033[0m\n               VPN Tabs\n"
	echo -e "        Use \033[0;33mFirefox\033[0m container\n            tabs with VPN\n  Nicholas Ferreira & Gabriel Belli\n"
}

ask(){
    echo -n "User (input hidden): "
    read -s vpn_user
    echo ""
    echo -n "Password (input hidden): "
    read -s vpn_password
    echo ""
}


help_banner(){
	echo -e "Usage:\n\n - Build image:\n$0 --build\n\n - Run a VPN container:\n$0 --run <OPENVPN FILE> [--map] [--port <PORT>] [--name <CONTAINER NAME>] [--ask-credendials]"
    echo -e "\n - Run a TOR container:\n$0 --run --tor [--map] [--port <PORT>]\n"
	echo "Options:"
	echo "   -h, --help                                  See this help message"
	echo "   -b, --build                                 Build the docker image"
	echo "   -l, --list                                  List containers"
	echo "   -n, --name <NAME>                           Container name (optional)"
    echo "   -m, --map                                   Map port to host (like docker run -p)"
    echo "   -p, --port <PORT>                           Proxy port (VPN default: 3128 | TOR default: 9050) (-m,--map required)"
	echo "   -r, --run <FILE>                            Run the docker container with the specified file"
	echo "   -t, --tor                                   Run the docker container with TOR Proxy"
    echo "   -c, --ask-credentials                       Ask VPN credentials (if your ovpn file doesn't contain it)"
    echo "   -v, --verbose                               Guess what!"
	echo "   --stop <CONTAINER NAME|ID>                  Stop a container"
	echo ""
	echo "Usage examples:"
	echo " $ $0 --build                                   Build the image"
	echo " $ $0 -r us2957.nordvpn.com -n Nord_US          Run the container w/ NordVPN config file"
	echo " $ $0 -r --tor --name tor                       Run the container w/ tor"
	echo ""
	exit
}

checkport(){
	if [[ ! "$1" =~ ^[0-9]+$  ]]; then
		echo -e "${red}[-] The port must be numerical.${reset}"
		exit
    fi
    if [ "$1" -gt 65535 ] || [ "$1" -lt 1 ]; then
        echo -e "${red}[-] The port is not valid (must be between 1-65535).${reset}"
        exit
    fi
    port=$1
}

checkfile(){
	if ! [ -f $(dirname $(realpath $0))/ovpn_files/$(basename $filename) ];then
		echo -e "${red}[-] Your config file must be a file inside\n"$(dirname $(realpath $0))/ovpn_files".${reset}"
		exit
	fi
}

run_container(){
	if [[ $tor ]]; then
		filename=empty
    else
        vpn_args='--cap-add=NET_ADMIN --device /dev/net/tun --sysctl net.ipv6.conf.all.disable_ipv6=0'
		checkfile
	fi

	random_string=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 5)

    docker_run=$(sudo docker run --rm -d $vpn_args \
    $(if [ $portmap ];then echo "-p $port:9050";fi ) \
	$(if [ $tor ]; then echo "--name tor_${random_string}";elif [ $2 ]; then echo "--name ${name}";fi) \
    -e OVPN_FILE=$(basename "$filename") \
	-e TOR_CONTAINER="$tor" \
    -e VPN_USER="$vpn_user" \
    -e VPN_PASSWORD="$vpn_password" \
	-v $(dirname $(realpath "$0"))/ovpn_files:/ovpn \
    vpntabs 2>&1)

	if [ $? -eq 0 ]; then
        ip="127.0.0.1"
        if [ ! $portmap ]; then 
            ip=$(sudo docker exec ${docker_run} ip -f inet addr show eth0 | sed -En -e 's/.*inet ([0-9.]+).*/\1/p')
        fi
        echo -e "${green}[+] Proxy server is running on ${white}socks://${ip}:${port}"$(if [ $tor ]; then echo "${green} with ${white}TOR"; else echo "${green} with ${white}$(basename $filename)"; fi)${reset}
        echo ""
        echo -e "${white}Container id: " ${docker_run:0:12}
	
    else
		if [[ $(echo $docker_run | grep "Unable to find image") ]]; then
			echo -e "${red}[-] You have to build the docker image before running it. Use -b to build.${reset}"
			exit 7359
		fi

		container_id=$(sudo docker ps -a | grep Created | cut -d " " -f 1)
		if [[ $container_id ]]; then
			container_start=$(sudo docker container start "$container_id" 2>&1 > /dev/null)
		fi

		if [[ $(echo "$docker_run" | grep "already allocated") ]]; then
			echo -e "${red}[-] Port already allocated. Choose another port with -p <port>.${reset}"
            echo ""
			exit 7359
		fi
		echo -e "${red}[-] Couldn't run docker container.${reset}"
        echo ""
		exit 7359
	fi
}

build(){
	echo -e "${green}[*] Building the docker image... Be patient...${reset}"
	sudo docker build -t vpntabs .
	if [ $? -eq 0 ]; then
		echo -e "${green}[+] Image built! Use $0 --run <ovpn file> to run with the selected file.${reset}"
	else
		echo -e "${red}[-] Could't build docker image...${reset}"
	fi
    echo ""
	exit
}

list_containers(){
	echo "CONTAINER ID	PORT	CREATED		STATUS		NAME"
	sudo docker ps -a  | grep "vpntabs" | sed -E "s/0.0.0.0:|->3128\/tcp//g" | sed -E "s/( {2,})/;/g" | awk -F';' '{ print $1 "\t" $6 "\t" $4 "\t" $5 "\t" $7 }'
    echo ""
}

stop_container(){
	if [[ "$1" == "" ]]; then
		echo -e "${red}[-] You need to insert the name of the container.${reset}\nUse ${white}$0 --list${reset} to see the container names"
	fi
	sudo docker container stop "$1"
    echo ""
	exit
}

create_network(){
    network=$(docker network create -d bridge --subnet $2 $1 2>&1)
    if [[ $network == *"Error"* ]]; then
        echo -e "${red}${network}${reset}"
    else
        echo "network $1 created with id: "${network:0:12}
    fi
    echo ""
    exit
}

### Always print banner
banner

### Argument reading
while [ "$1" != "" ]; do
    case $1 in
        -b | --build )
            build
            shift ;;

        -p | --port )
            shift
            port="$1"
            checkport "$port" ;;

        -m | --map )
        	portmap=1 ;;

        -h | --help )
            help_banner ;;

        -n | --name )
        	shift
        	name="$1" ;;

        -r | --run )
        	shift
        	filename="$1"
        	if [[ "$filename" == "--tor" || "$filename" == "-t" ]]; then
				tor=1
        	fi
        	run=1 ;;

        -t | --tor )
        	tor=1 ;;

        -c | --ask-credentials )
        	ask ;;

        -v | --verbose )
            set -x ;;

        -l | --list )
        	list=1 ;;

        --stop )
        	shift
        	stop_container "$1" ;;

        * ) echo -e "${red}[-] Invalid option. Use -h for help.${reset}"
            exit 1 ;;
    esac
    shift
done

### Command execution
if [[ $run ]]; then
	if [[ ! $tor ]]; then
		checkfile
	fi
	run_container
	exit
elif [[ $list ]]; then
	list_containers
elif [[ "$1" == "" ]]; then
	echo -e " - Build image:\n$0 --build\n\n - Run container:\n$0 --run <OPENVPN FILE> [--port <PORT>] [--name <CONTAINER NAME>]\n\nFor more information, use --help"
else
	echo -e "${orange}[!] If you want to run the container, use --run.${reset}"
fi  
